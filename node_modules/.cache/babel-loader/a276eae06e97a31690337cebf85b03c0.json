{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport initializeAuthentication from \"../components/Firebase/firebase.init\";\nimport { getAuth, signInWithPopup, createUserWithEmailAndPassword, GoogleAuthProvider, GithubAuthProvider, onAuthStateChanged, signOut } from \"firebase/auth\";\nimport SignUp from \"../components/SignUp/SignUp\";\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [error, setError] = useState('');\n  const auth = getAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const githubProvider = new GithubAuthProvider();\n  const {\n    name,\n    email,\n    password\n  } = SignUp(); // CreateUser Using google Email & Password \n\n  const createUserUsingEmail = () => {\n    createUserWithEmailAndPassword(auth, name, email, password).then(result => {\n      console.log(result.user);\n      setUser(result.user);\n    }).catch(error => {\n      setError(error.message);\n    });\n  }; // SignIn Using google provider \n\n\n  const signInUsingGoogle = () => {\n    signInWithPopup(auth, googleProvider).then(result => {\n      console.log(result.user);\n      setUser(result.user);\n    }).catch(error => {\n      setError(error.message);\n    });\n  }; //Sign In using Github Provider\n\n\n  const signInUsingGithub = () => {\n    signInWithPopup(auth, githubProvider).then(result => {\n      console.log(result.user);\n      setUser(result.user);\n    }).catch(error => {\n      setError(error.message);\n    });\n  }; // logout function call \n\n\n  const logout = () => {\n    signOut(auth).then(() => {\n      setUser({});\n    });\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        console.log(\"Inside state\");\n        setUser(user);\n      }\n    });\n  }, []);\n  return {\n    user,\n    error,\n    createUserUsingEmail,\n    signInUsingGoogle,\n    signInUsingGithub,\n    logout\n  };\n};\n\n_s(useFirebase, \"iIn/869R6T2MNTr+7gKkePKLFYg=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["E:/Programming Hero/Projects/healthcare-related-website/src/Hooks/useFirebase.js"],"names":["useEffect","useState","initializeAuthentication","getAuth","signInWithPopup","createUserWithEmailAndPassword","GoogleAuthProvider","GithubAuthProvider","onAuthStateChanged","signOut","SignUp","useFirebase","user","setUser","error","setError","auth","googleProvider","githubProvider","name","email","password","createUserUsingEmail","then","result","console","log","catch","message","signInUsingGoogle","signInUsingGithub","logout"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport initializeAuthentication from \"../components/Firebase/firebase.init\";\r\nimport { getAuth, signInWithPopup, createUserWithEmailAndPassword, GoogleAuthProvider, GithubAuthProvider, onAuthStateChanged, signOut } from \"firebase/auth\";\r\nimport SignUp from \"../components/SignUp/SignUp\";\r\n\r\ninitializeAuthentication();\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const [error, setError] = useState('');\r\n\r\n    const auth = getAuth();\r\n    const googleProvider = new GoogleAuthProvider();\r\n    const githubProvider = new GithubAuthProvider();\r\n    const { name, email, password } = SignUp();\r\n    // CreateUser Using google Email & Password \r\n    const createUserUsingEmail = () => {\r\n        createUserWithEmailAndPassword(auth, name, email, password)\r\n            .then(result => {\r\n                console.log(result.user);\r\n                setUser(result.user)\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n    }\r\n    // SignIn Using google provider \r\n    const signInUsingGoogle = () => {\r\n        signInWithPopup(auth, googleProvider)\r\n            .then(result => {\r\n                console.log(result.user);\r\n                setUser(result.user)\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n    }\r\n\r\n    //Sign In using Github Provider\r\n    const signInUsingGithub = () => {\r\n        signInWithPopup(auth, githubProvider)\r\n            .then(result => {\r\n                console.log(result.user);\r\n                setUser(result.user)\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n    }\r\n    // logout function call \r\n    const logout = () => {\r\n        signOut(auth)\r\n            .then(() => {\r\n                setUser({});\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, user => {\r\n            if (user) {\r\n                console.log(\"Inside state\");\r\n                setUser(user)\r\n            }\r\n        })\r\n    }, [])\r\n    return {\r\n        user,\r\n        error,\r\n        createUserUsingEmail,\r\n        signInUsingGoogle,\r\n        signInUsingGithub,\r\n        logout\r\n    }\r\n}\r\n\r\nexport default useFirebase;"]},"metadata":{},"sourceType":"module"}