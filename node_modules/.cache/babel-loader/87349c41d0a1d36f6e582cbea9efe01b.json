{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport initializeAuthentication from \"../components/Firebase/firebase.init\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, GithubAuthProvider, onAuthStateChanged, signOut } from \"firebase/auth\";\nimport SignUp from \"../components/SignUp/SignUp\";\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const auth = getAuth();\n  const googleProvider = new GoogleAuthProvider();\n  const githubProvider = new GithubAuthProvider(); // SignIn Using google provider \n\n  const signInUsingGoogle = () => {\n    setIsLoading(true);\n    signInWithPopup(auth, googleProvider).then(result => {\n      console.log(result.user);\n      console.log(result.user);\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => setIsLoading(false));\n  }; //Sign In using Github Provider\n\n\n  const signInUsingGithub = () => {\n    signInWithPopup(auth, githubProvider).then(result => {\n      console.log(result.user);\n      setUser(result.user);\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => setIsLoading(false));\n  }; // logout function call \n\n\n  const logout = () => {\n    setIsLoading(true);\n    signOut(auth).then(() => {\n      setUser({});\n    }).finally(() => setIsLoading(false));\n  }; // observe user state change \n\n\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, []);\n  return {\n    user,\n    error,\n    isLoading,\n    createUserUsingEmail,\n    signInUsingGoogle,\n    signInUsingGithub,\n    logout\n  };\n};\n\n_s(useFirebase, \"YC//qp8v00xj5fJwtAqsE3fY2yo=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["E:/Programming Hero/Projects/healthcare-related-website/src/Hooks/useFirebase.js"],"names":["useEffect","useState","initializeAuthentication","getAuth","signInWithPopup","GoogleAuthProvider","GithubAuthProvider","onAuthStateChanged","signOut","SignUp","useFirebase","user","setUser","error","setError","isLoading","setIsLoading","auth","googleProvider","githubProvider","signInUsingGoogle","then","result","console","log","catch","message","finally","signInUsingGithub","logout","unsubscribed","createUserUsingEmail"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,wBAAP,MAAqC,sCAArC;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,EAAuDC,kBAAvD,EAA2EC,kBAA3E,EAA+FC,OAA/F,QAA8G,eAA9G;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AAGAP,wBAAwB;;AACxB,MAAMQ,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMgB,IAAI,GAAGd,OAAO,EAApB;AACA,QAAMe,cAAc,GAAG,IAAIb,kBAAJ,EAAvB;AACA,QAAMc,cAAc,GAAG,IAAIb,kBAAJ,EAAvB,CANsB,CAStB;;AACA,QAAMc,iBAAiB,GAAG,MAAM;AAC5BJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAZ,IAAAA,eAAe,CAACa,IAAD,EAAOC,cAAP,CAAf,CACKG,IADL,CACUC,MAAM,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACX,IAAnB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACX,IAAnB;AACH,KAJL,EAKKc,KALL,CAKWZ,KAAK,IAAI;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACa,OAAP,CAAR;AACH,KAPL,EAQKC,OARL,CAQa,MAAMX,YAAY,CAAC,KAAD,CAR/B;AASH,GAXD,CAVsB,CAuBtB;;;AACA,QAAMY,iBAAiB,GAAG,MAAM;AAC5BxB,IAAAA,eAAe,CAACa,IAAD,EAAOE,cAAP,CAAf,CACKE,IADL,CACUC,MAAM,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACX,IAAnB;AACAC,MAAAA,OAAO,CAACU,MAAM,CAACX,IAAR,CAAP;AACH,KAJL,EAKKc,KALL,CAKWZ,KAAK,IAAI;AACZC,MAAAA,QAAQ,CAACD,KAAK,CAACa,OAAP,CAAR;AACH,KAPL,EAQKC,OARL,CAQa,MAAMX,YAAY,CAAC,KAAD,CAR/B;AASH,GAVD,CAxBsB,CAmCtB;;;AACA,QAAMa,MAAM,GAAG,MAAM;AACjBb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAR,IAAAA,OAAO,CAACS,IAAD,CAAP,CACKI,IADL,CACU,MAAM;AACRT,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH,KAHL,EAIKe,OAJL,CAIa,MAAMX,YAAY,CAAC,KAAD,CAJ/B;AAKH,GAPD,CApCsB,CA4CtB;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM8B,YAAY,GAAGvB,kBAAkB,CAACU,IAAD,EAAON,IAAI,IAAI;AAClD,UAAIA,IAAJ,EAAU;AACNC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OAFD,MAGK;AACDC,QAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AACDI,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KARsC,CAAvC;AASA,WAAO,MAAMc,YAAb;AACH,GAXQ,EAWN,EAXM,CAAT;AAYA,SAAO;AACHnB,IAAAA,IADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA,SAHG;AAIHgB,IAAAA,oBAJG;AAKHX,IAAAA,iBALG;AAMHQ,IAAAA,iBANG;AAOHC,IAAAA;AAPG,GAAP;AASH,CAlED;;GAAMnB,W;;AAoEN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport initializeAuthentication from \"../components/Firebase/firebase.init\";\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider, GithubAuthProvider, onAuthStateChanged, signOut } from \"firebase/auth\";\r\nimport SignUp from \"../components/SignUp/SignUp\";\r\n\r\n\r\ninitializeAuthentication();\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const [error, setError] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const auth = getAuth();\r\n    const googleProvider = new GoogleAuthProvider();\r\n    const githubProvider = new GithubAuthProvider();\r\n\r\n\r\n    // SignIn Using google provider \r\n    const signInUsingGoogle = () => {\r\n        setIsLoading(true);\r\n        signInWithPopup(auth, googleProvider)\r\n            .then(result => {\r\n                console.log(result.user);\r\n                console.log(result.user)\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n\r\n    //Sign In using Github Provider\r\n    const signInUsingGithub = () => {\r\n        signInWithPopup(auth, githubProvider)\r\n            .then(result => {\r\n                console.log(result.user);\r\n                setUser(result.user)\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n            .finally(() => setIsLoading(false));\r\n    }\r\n    // logout function call \r\n    const logout = () => {\r\n        setIsLoading(true);\r\n        signOut(auth)\r\n            .then(() => {\r\n                setUser({});\r\n            })\r\n            .finally(() => setIsLoading(false))\r\n    }\r\n    // observe user state change \r\n    useEffect(() => {\r\n        const unsubscribed = onAuthStateChanged(auth, user => {\r\n            if (user) {\r\n                setUser(user)\r\n            }\r\n            else {\r\n                setUser({});\r\n            }\r\n            setIsLoading(false)\r\n        });\r\n        return () => unsubscribed;\r\n    }, [])\r\n    return {\r\n        user,\r\n        error,\r\n        isLoading,\r\n        createUserUsingEmail,\r\n        signInUsingGoogle,\r\n        signInUsingGithub,\r\n        logout\r\n    }\r\n}\r\n\r\nexport default useFirebase;"]},"metadata":{},"sourceType":"module"}